#!/usr/bin/env python

import sys
from optparse import OptionParser

import microsecrets
from microsecrets import with_s3_env

def main(args):

    usage = """%prog [options] COMMAND...

Provide environment variables and files from S3 to COMMAND.

The JSON environment file should contain a dictionary with this key:
    'environment': a dictionary of environment variable & value pairs

Example JSON:
    {
      'environment': {
        'EDITOR': 'vim',
        'dbpassword': 'hunter2'
      }
    }

Example usage:
    Download `/myenv.json' from `mybucket' and run /bin/myserver
    $ %prog -b mybucket -e myenv.json -- /bin/myserver
""".rstrip()

    parser = OptionParser(usage=usage,
                          version='%prog ' + microsecrets.VERSION)

    parser.add_option('-r', '--region', dest='region', default='us-east-1',
                      help='Connect to REGION in S3')

    parser.add_option('-b', '--bucket', dest='bucket',
                      help='Connect to BUCKET in S3')

    parser.add_option('-s', '--service', dest='service',
                      help='Name of the service (determines S3 path)')

    parser.add_option('-c', '--checksum', dest='checksum', metavar='HASH',
                      help='Checksum (SHA1/SHA256) of JSON environment file')
    parser.add_option('-w', '--whitelist', dest='env_whitelist',
                      metavar='VARS', action='append',
                      help=('Whitespace separated list of allowed env '
                            'variables (may be passed multiple times)'))

    parser.add_option('-f', '--file', dest='files', action='append',
                      metavar='KEY:PATH[:HASH]',
                      help=('Download S3 file from KEY to destination PATH, '
                            'verify with HASH (may be passed multiple times)'))

    opts, args = parser.parse_args()

    command = args

    if not command:
        parser.print_help()
        sys.stderr.write('error: must provide COMMAND\n')
        return 1

    if not opts.bucket:
        parser.print_help()
        sys.stderr.write('error: must provide -b / --bucket for S3 bucket\n')
        return 1

    if opts.files:
        raise NotImplementedError('--file not implemented yet, sorry!')

    with_s3_env(command=command, region_name=opts.region,
                bucket_name=opts.bucket, service_name=opts.service,
                checksum=opts.checksum, files=opts.files)

    # not reached
    return 5

if __name__ == '__main__':
    sys.exit(main(sys.argv))
